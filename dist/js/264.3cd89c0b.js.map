{"version":3,"file":"js/264.3cd89c0b.js","mappings":"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","sources":["webpack://component-library/./src/views/MarkdownEditorView.vue","webpack://component-library/./node_modules/marked/lib/marked.esm.js","webpack://component-library/./src/views/MarkdownEditorView.vue?a807"],"sourcesContent":["<template>\r\n  <main class=\"main\">\r\n    <div class=\"content\">\r\n      <div class=\"markdown__text\">\r\n        <h1>Markdown editor</h1>\r\n        <p>Using npm package - marked</p>\r\n        <p>install: npm i marked</p>\r\n      </div>\r\n      <div class=\"editor\">\r\n        <textarea class=\"input\" :value=\"input\" @input=\"update\"></textarea>\r\n        <div class=\"output\" v-html=\"output\"></div>\r\n      </div>\r\n    </div>\r\n  </main>\r\n</template>\r\n\r\n<script>\r\nimport { marked } from \"marked\";\r\n\r\nexport default {\r\n  name: \"MarkdownEditor\",\r\n  data: () => ({\r\n    input: \"# hello\",\r\n  }),\r\n  computed: {\r\n    output() {\r\n      return marked(this.input);\r\n    },\r\n  },\r\n  methods: {\r\n    update: function (e) {\r\n      this.input = e.target.value;\r\n    },\r\n  },\r\n};\r\n</script>\r\n \r\n\r\n<style lang=\"scss\">\r\n.markdown {\r\n  &__text {\r\n    margin-bottom: 15px;\r\n  }\r\n}\r\n.editor {\r\n  height: 20vh;\r\n  display: flex;\r\n}\r\n\r\n.input,\r\n.output {\r\n  overflow: auto;\r\n  width: 50%;\r\n  height: 100%;\r\n  box-sizing: border-box;\r\n  padding: 0 20px;\r\n}\r\n\r\n.input {\r\n  border: none;\r\n  border-right: 1px solid #ccc;\r\n  resize: none;\r\n  outline: none;\r\n  background-color: #f6f6f6;\r\n  font-size: 14px;\r\n  font-family: \"Monaco\", courier, monospace;\r\n  padding: 20px;\r\n}\r\n\r\ncode {\r\n  color: #f66;\r\n}\r\n</style>","/**\n * marked - a markdown parser\n * Copyright (c) 2011-2022, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\nfunction getDefaults() {\n  return {\n    async: false,\n    baseUrl: null,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: null,\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartypants: false,\n    tokenizer: null,\n    walkTokens: null,\n    xhtml: false\n  };\n}\n\nlet defaults = getDefaults();\n\nfunction changeDefaults(newDefaults) {\n  defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape(html, encode) {\n  if (encode) {\n    if (escapeTest.test(html)) {\n      return html.replace(escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (escapeTestNoEncode.test(html)) {\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n\n  return html;\n}\n\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\n\n/**\n * @param {string} html\n */\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nconst caret = /(^|[^\\[])\\^/g;\n\n/**\n * @param {string | RegExp} regex\n * @param {string} opt\n */\nfunction edit(regex, opt) {\n  regex = typeof regex === 'string' ? regex : regex.source;\n  opt = opt || '';\n  const obj = {\n    replace: (name, val) => {\n      val = val.source || val;\n      val = val.replace(caret, '$1');\n      regex = regex.replace(name, val);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(regex, opt);\n    }\n  };\n  return obj;\n}\n\nconst nonWordAndColonTest = /[^\\w:]/g;\nconst originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n\n/**\n * @param {boolean} sanitize\n * @param {string} base\n * @param {string} href\n */\nfunction cleanUrl(sanitize, base, href) {\n  if (sanitize) {\n    let prot;\n    try {\n      prot = decodeURIComponent(unescape(href))\n        .replace(nonWordAndColonTest, '')\n        .toLowerCase();\n    } catch (e) {\n      return null;\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return null;\n    }\n  }\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n  return href;\n}\n\nconst baseUrls = {};\nconst justDomain = /^[^:]+:\\/*[^/]*$/;\nconst protocol = /^([^:]+:)[\\s\\S]*$/;\nconst domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\n\n/**\n * @param {string} base\n * @param {string} href\n */\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (justDomain.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = rtrim(base, '/', true);\n    }\n  }\n  base = baseUrls[' ' + base];\n  const relativeBase = base.indexOf(':') === -1;\n\n  if (href.substring(0, 2) === '//') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(protocol, '$1') + href;\n  } else if (href.charAt(0) === '/') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(domain, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\n\nconst noopTest = { exec: function noopTest() {} };\n\nfunction merge(obj) {\n  let i = 1,\n    target,\n    key;\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n}\n\nfunction splitCells(tableRow, count) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n      let escaped = false,\n        curr = offset;\n      while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n    cells = row.split(/ \\|/);\n  let i = 0;\n\n  // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n  if (!cells[0].trim()) { cells.shift(); }\n  if (cells.length > 0 && !cells[cells.length - 1].trim()) { cells.pop(); }\n\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n  return cells;\n}\n\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param {string} str\n * @param {string} c\n * @param {boolean} invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n  const l = str.length;\n  if (l === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  let suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.slice(0, l - suffLen);\n}\n\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n  const l = str.length;\n  let level = 0,\n    i = 0;\n  for (; i < l; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\nfunction checkSanitizeDeprecation(opt) {\n  if (opt && opt.sanitize && !opt.silent) {\n    console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\n  }\n}\n\n// copied from https://stackoverflow.com/a/5450113/806777\n/**\n * @param {string} pattern\n * @param {number} count\n */\nfunction repeatString(pattern, count) {\n  if (count < 1) {\n    return '';\n  }\n  let result = '';\n  while (count > 1) {\n    if (count & 1) {\n      result += pattern;\n    }\n    count >>= 1;\n    pattern += pattern;\n  }\n  return result + pattern;\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n  const href = link.href;\n  const title = link.title ? escape(link.title) : null;\n  const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n\n  if (cap[0].charAt(0) !== '!') {\n    lexer.state.inLink = true;\n    const token = {\n      type: 'link',\n      raw,\n      href,\n      title,\n      text,\n      tokens: lexer.inlineTokens(text)\n    };\n    lexer.state.inLink = false;\n    return token;\n  }\n  return {\n    type: 'image',\n    raw,\n    href,\n    title,\n    text: escape(text)\n  };\n}\n\nfunction indentCodeCompensation(raw, text) {\n  const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n\n  if (matchIndentToCode === null) {\n    return text;\n  }\n\n  const indentToCode = matchIndentToCode[1];\n\n  return text\n    .split('\\n')\n    .map(node => {\n      const matchIndentInNode = node.match(/^\\s+/);\n      if (matchIndentInNode === null) {\n        return node;\n      }\n\n      const [indentInNode] = matchIndentInNode;\n\n      if (indentInNode.length >= indentToCode.length) {\n        return node.slice(indentToCode.length);\n      }\n\n      return node;\n    })\n    .join('\\n');\n}\n\n/**\n * Tokenizer\n */\nclass Tokenizer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  space(src) {\n    const cap = this.rules.block.newline.exec(src);\n    if (cap && cap[0].length > 0) {\n      return {\n        type: 'space',\n        raw: cap[0]\n      };\n    }\n  }\n\n  code(src) {\n    const cap = this.rules.block.code.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ {1,4}/gm, '');\n      return {\n        type: 'code',\n        raw: cap[0],\n        codeBlockStyle: 'indented',\n        text: !this.options.pedantic\n          ? rtrim(text, '\\n')\n          : text\n      };\n    }\n  }\n\n  fences(src) {\n    const cap = this.rules.block.fences.exec(src);\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || '');\n\n      return {\n        type: 'code',\n        raw,\n        lang: cap[2] ? cap[2].trim().replace(this.rules.inline._escapes, '$1') : cap[2],\n        text\n      };\n    }\n  }\n\n  heading(src) {\n    const cap = this.rules.block.heading.exec(src);\n    if (cap) {\n      let text = cap[2].trim();\n\n      // remove trailing #s\n      if (/#$/.test(text)) {\n        const trimmed = rtrim(text, '#');\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || / $/.test(trimmed)) {\n          // CommonMark requires space before trailing #s\n          text = trimmed.trim();\n        }\n      }\n\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[1].length,\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n\n  hr(src) {\n    const cap = this.rules.block.hr.exec(src);\n    if (cap) {\n      return {\n        type: 'hr',\n        raw: cap[0]\n      };\n    }\n  }\n\n  blockquote(src) {\n    const cap = this.rules.block.blockquote.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ *>[ \\t]?/gm, '');\n\n      return {\n        type: 'blockquote',\n        raw: cap[0],\n        tokens: this.lexer.blockTokens(text, []),\n        text\n      };\n    }\n  }\n\n  list(src) {\n    let cap = this.rules.block.list.exec(src);\n    if (cap) {\n      let raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine,\n        line, nextLine, rawLine, itemContents, endEarly;\n\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n\n      const list = {\n        type: 'list',\n        raw: '',\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : '',\n        loose: false,\n        items: []\n      };\n\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n\n      if (this.options.pedantic) {\n        bull = isordered ? bull : '[*+-]';\n      }\n\n      // Get next list item\n      const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n\n      // Check if current bullet point can start a new List Item\n      while (src) {\n        endEarly = false;\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n\n        if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n          break;\n        }\n\n        raw = cap[0];\n        src = src.substring(raw.length);\n\n        line = cap[2].split('\\n', 1)[0];\n        nextLine = src.split('\\n', 1)[0];\n\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimLeft();\n        } else {\n          indent = cap[2].search(/[^ ]/); // Find first non-space char\n          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n\n        blankLine = false;\n\n        if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n          raw += nextLine + '\\n';\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n\n        if (!endEarly) {\n          const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?: [^\\\\n]*)?(?:\\\\n|$))`);\n          const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n          const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n          const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n\n          // Check if following lines should be included in List Item\n          while (src) {\n            rawLine = src.split('\\n', 1)[0];\n            line = rawLine;\n\n            // Re-align to follow commonmark nesting rules\n            if (this.options.pedantic) {\n              line = line.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n            }\n\n            // End list item if found code fences\n            if (fencesBeginRegex.test(line)) {\n              break;\n            }\n\n            // End list item if found start of new heading\n            if (headingBeginRegex.test(line)) {\n              break;\n            }\n\n            // End list item if found start of new bullet\n            if (nextBulletRegex.test(line)) {\n              break;\n            }\n\n            // Horizontal rule found\n            if (hrRegex.test(src)) {\n              break;\n            }\n\n            if (line.search(/[^ ]/) >= indent || !line.trim()) { // Dedent if possible\n              itemContents += '\\n' + line.slice(indent);\n            } else if (!blankLine) { // Until blank line, item doesn't need indentation\n              itemContents += '\\n' + line;\n            } else { // Otherwise, improper indentation ends this item\n              break;\n            }\n\n            if (!blankLine && !line.trim()) { // Check if current line is blank\n              blankLine = true;\n            }\n\n            raw += rawLine + '\\n';\n            src = src.substring(rawLine.length + 1);\n          }\n        }\n\n        if (!list.loose) {\n          // If the previous item ended with a blank line, the list is loose\n          if (endsWithBlankLine) {\n            list.loose = true;\n          } else if (/\\n *\\n *$/.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        }\n\n        // Check for task list items\n        if (this.options.gfm) {\n          istask = /^\\[[ xX]\\] /.exec(itemContents);\n          if (istask) {\n            ischecked = istask[0] !== '[ ] ';\n            itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n          }\n        }\n\n        list.items.push({\n          type: 'list_item',\n          raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents\n        });\n\n        list.raw += raw;\n      }\n\n      // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n      list.items[list.items.length - 1].raw = raw.trimRight();\n      list.items[list.items.length - 1].text = itemContents.trimRight();\n      list.raw = list.raw.trimRight();\n\n      const l = list.items.length;\n\n      // Item child tokens handled here at end because we needed to have the final item to trim it first\n      for (i = 0; i < l; i++) {\n        this.lexer.state.top = false;\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n        const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n        const hasMultipleLineBreaks = spacers.every(t => {\n          const chars = t.raw.split('');\n          let lineBreaks = 0;\n          for (const char of chars) {\n            if (char === '\\n') {\n              lineBreaks += 1;\n            }\n            if (lineBreaks > 1) {\n              return true;\n            }\n          }\n\n          return false;\n        });\n\n        if (!list.loose && spacers.length && hasMultipleLineBreaks) {\n          // Having a single line break doesn't mean a list is loose. A single line break is terminating the last list item\n          list.loose = true;\n          list.items[i].loose = true;\n        }\n      }\n\n      return list;\n    }\n  }\n\n  html(src) {\n    const cap = this.rules.block.html.exec(src);\n    if (cap) {\n      const token = {\n        type: 'html',\n        raw: cap[0],\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      };\n      if (this.options.sanitize) {\n        const text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]);\n        token.type = 'paragraph';\n        token.text = text;\n        token.tokens = this.lexer.inline(text);\n      }\n      return token;\n    }\n  }\n\n  def(src) {\n    const cap = this.rules.block.def.exec(src);\n    if (cap) {\n      const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline._escapes, '$1') : '';\n      const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline._escapes, '$1') : cap[3];\n      return {\n        type: 'def',\n        tag,\n        raw: cap[0],\n        href,\n        title\n      };\n    }\n  }\n\n  table(src) {\n    const cap = this.rules.block.table.exec(src);\n    if (cap) {\n      const item = {\n        type: 'table',\n        header: splitCells(cap[1]).map(c => { return { text: c }; }),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        item.raw = cap[0];\n\n        let l = item.align.length;\n        let i, j, k, row;\n        for (i = 0; i < l; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        l = item.rows.length;\n        for (i = 0; i < l; i++) {\n          item.rows[i] = splitCells(item.rows[i], item.header.length).map(c => { return { text: c }; });\n        }\n\n        // parse child tokens inside headers and cells\n\n        // header child tokens\n        l = item.header.length;\n        for (j = 0; j < l; j++) {\n          item.header[j].tokens = this.lexer.inline(item.header[j].text);\n        }\n\n        // cell child tokens\n        l = item.rows.length;\n        for (j = 0; j < l; j++) {\n          row = item.rows[j];\n          for (k = 0; k < row.length; k++) {\n            row[k].tokens = this.lexer.inline(row[k].text);\n          }\n        }\n\n        return item;\n      }\n    }\n  }\n\n  lheading(src) {\n    const cap = this.rules.block.lheading.exec(src);\n    if (cap) {\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\n        text: cap[1],\n        tokens: this.lexer.inline(cap[1])\n      };\n    }\n  }\n\n  paragraph(src) {\n    const cap = this.rules.block.paragraph.exec(src);\n    if (cap) {\n      const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n        ? cap[1].slice(0, -1)\n        : cap[1];\n      return {\n        type: 'paragraph',\n        raw: cap[0],\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n\n  text(src) {\n    const cap = this.rules.block.text.exec(src);\n    if (cap) {\n      return {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        tokens: this.lexer.inline(cap[0])\n      };\n    }\n  }\n\n  escape(src) {\n    const cap = this.rules.inline.escape.exec(src);\n    if (cap) {\n      return {\n        type: 'escape',\n        raw: cap[0],\n        text: escape(cap[1])\n      };\n    }\n  }\n\n  tag(src) {\n    const cap = this.rules.inline.tag.exec(src);\n    if (cap) {\n      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n\n      return {\n        type: this.options.sanitize\n          ? 'text'\n          : 'html',\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        text: this.options.sanitize\n          ? (this.options.sanitizer\n            ? this.options.sanitizer(cap[0])\n            : escape(cap[0]))\n          : cap[0]\n      };\n    }\n  }\n\n  link(src) {\n    const cap = this.rules.inline.link.exec(src);\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n      if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n        // commonmark requires matching angle brackets\n        if (!(/>$/.test(trimmedUrl))) {\n          return;\n        }\n\n        // ending angle bracket cannot be escaped\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        // find closing parenthesis\n        const lastParenIndex = findClosingBracket(cap[2], '()');\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n      }\n      let href = cap[2];\n      let title = '';\n      if (this.options.pedantic) {\n        // split pedantic href and title\n        const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n\n      href = href.trim();\n      if (/^</.test(href)) {\n        if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n          // pedantic allows starting angle bracket without ending angle bracket\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n        title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n      }, cap[0], this.lexer);\n    }\n  }\n\n  reflink(src, links) {\n    let cap;\n    if ((cap = this.rules.inline.reflink.exec(src))\n        || (cap = this.rules.inline.nolink.exec(src))) {\n      let link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = links[link.toLowerCase()];\n      if (!link) {\n        const text = cap[0].charAt(0);\n        return {\n          type: 'text',\n          raw: text,\n          text\n        };\n      }\n      return outputLink(cap, link, cap[0], this.lexer);\n    }\n  }\n\n  emStrong(src, maskedSrc, prevChar = '') {\n    let match = this.rules.inline.emStrong.lDelim.exec(src);\n    if (!match) return;\n\n    // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n    if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u)) return;\n\n    const nextChar = match[1] || match[2] || '';\n\n    if (!nextChar || (nextChar && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar)))) {\n      const lLength = match[0].length - 1;\n      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n\n      const endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n      endReg.lastIndex = 0;\n\n      // Clip maskedSrc to same section of string as src (move to lexer?)\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n\n        if (!rDelim) continue; // skip single * in __abc*abc__\n\n        rLength = rDelim.length;\n\n        if (match[3] || match[4]) { // found another Left Delim\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) { // either Left or Right Delim\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue; // CommonMark Emphasis Rules 9-10\n          }\n        }\n\n        delimTotal -= rLength;\n\n        if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n\n        // Remove extra characters. *a*** -> *a*\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n\n        const raw = src.slice(0, lLength + match.index + (match[0].length - rDelim.length) + rLength);\n\n        // Create `em` if smallest delimiter has odd char count. *a***\n        if (Math.min(lLength, rLength) % 2) {\n          const text = raw.slice(1, -1);\n          return {\n            type: 'em',\n            raw,\n            text,\n            tokens: this.lexer.inlineTokens(text)\n          };\n        }\n\n        // Create 'strong' if smallest delimiter has even char count. **a***\n        const text = raw.slice(2, -2);\n        return {\n          type: 'strong',\n          raw,\n          text,\n          tokens: this.lexer.inlineTokens(text)\n        };\n      }\n    }\n  }\n\n  codespan(src) {\n    const cap = this.rules.inline.code.exec(src);\n    if (cap) {\n      let text = cap[2].replace(/\\n/g, ' ');\n      const hasNonSpaceChars = /[^ ]/.test(text);\n      const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n      text = escape(text, true);\n      return {\n        type: 'codespan',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n\n  br(src) {\n    const cap = this.rules.inline.br.exec(src);\n    if (cap) {\n      return {\n        type: 'br',\n        raw: cap[0]\n      };\n    }\n  }\n\n  del(src) {\n    const cap = this.rules.inline.del.exec(src);\n    if (cap) {\n      return {\n        type: 'del',\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2])\n      };\n    }\n  }\n\n  autolink(src, mangle) {\n    const cap = this.rules.inline.autolink.exec(src);\n    if (cap) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[1]) : cap[1]);\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  url(src, mangle) {\n    let cap;\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[0]) : cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        let prevCapZero;\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n        } while (prevCapZero !== cap[0]);\n        text = escape(cap[0]);\n        if (cap[1] === 'www.') {\n          href = 'http://' + text;\n        } else {\n          href = text;\n        }\n      }\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  inlineText(src, smartypants) {\n    const cap = this.rules.inline.text.exec(src);\n    if (cap) {\n      let text;\n      if (this.lexer.state.inRawBlock) {\n        text = this.options.sanitize ? (this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0])) : cap[0];\n      } else {\n        text = escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);\n      }\n      return {\n        type: 'text',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n}\n\n/**\n * Block-Level Grammar\n */\nconst block = {\n  newline: /^(?: *(?:\\n|$))+/,\n  code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n  fences: /^ {0,3}(`{3,}(?=[^`\\n]*\\n)|~{3,})([^\\n]*)\\n(?:|([\\s\\S]*?)\\n)(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n  hr: /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,\n  heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/,\n  html: '^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n    + ')',\n  def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noopTest,\n  lheading: /^((?:.|\\n(?!\\n))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  // regex template, placeholders will be replaced according to different paragraph\n  // interruption rules of commonmark and the original markdown spec:\n  _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\n\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n  .replace('label', block._label)\n  .replace('title', block._title)\n  .getRegex();\n\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */)\n  .replace('bull', block.bullet)\n  .getRegex();\n\nblock.list = edit(block.list)\n  .replace(/bull/g, block.bullet)\n  .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n  .replace('def', '\\\\n+(?=' + block.def.source + ')')\n  .getRegex();\n\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n  + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, 'i')\n  .replace('comment', block._comment)\n  .replace('tag', block._tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nblock.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('|table', '')\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.blockquote = edit(block.blockquote)\n  .replace('paragraph', block.paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block);\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  table: '^ *([^\\\\n ].*\\\\|.*)\\\\n' // Header\n    + ' {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n});\n\nblock.gfm.table = edit(block.gfm.table)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('blockquote', ' {0,3}>')\n  .replace('code', ' {4}[^\\\\n]')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.gfm.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('table', block.gfm.table) // interrupt paragraphs with table\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nblock.pedantic = merge({}, block.normal, {\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', block._comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest, // fences not supported\n  lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  paragraph: edit(block.normal._paragraph)\n    .replace('hr', block.hr)\n    .replace('heading', ' *#{1,6} *[^\\n]')\n    .replace('lheading', block.lheading)\n    .replace('blockquote', ' {0,3}>')\n    .replace('|fences', '')\n    .replace('|list', '')\n    .replace('|html', '')\n    .getRegex()\n});\n\n/**\n * Inline-Level Grammar\n */\nconst inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noopTest,\n  tag: '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>', // CDATA section\n  link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n  nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n  reflinkSearch: 'reflink|nolink(?!\\\\()',\n  emStrong: {\n    lDelim: /^(?:\\*+(?:([punct_])|[^\\s*]))|^_+(?:([punct*])|([^\\s_]))/,\n    //        (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n    //          () Skip orphan inside strong                                      () Consume to delim     (1) #***                (2) a***#, a***                             (3) #***a, ***a                 (4) ***#              (5) #***#                 (6) a***a\n    rDelimAst: /^(?:[^_*\\\\]|\\\\.)*?\\_\\_(?:[^_*\\\\]|\\\\.)*?\\*(?:[^_*\\\\]|\\\\.)*?(?=\\_\\_)|(?:[^*\\\\]|\\\\.)+(?=[^*])|[punct_](\\*+)(?=[\\s]|$)|(?:[^punct*_\\s\\\\]|\\\\.)(\\*+)(?=[punct_\\s]|$)|[punct_\\s](\\*+)(?=[^punct*_\\s])|[\\s](\\*+)(?=[punct_])|[punct_](\\*+)(?=[punct_])|(?:[^punct*_\\s\\\\]|\\\\.)(\\*+)(?=[^punct*_\\s])/,\n    rDelimUnd: /^(?:[^_*\\\\]|\\\\.)*?\\*\\*(?:[^_*\\\\]|\\\\.)*?\\_(?:[^_*\\\\]|\\\\.)*?(?=\\*\\*)|(?:[^_\\\\]|\\\\.)+(?=[^_])|[punct*](\\_+)(?=[\\s]|$)|(?:[^punct*_\\s\\\\]|\\\\.)(\\_+)(?=[punct*\\s]|$)|[punct*\\s](\\_+)(?=[^punct*_\\s])|[\\s](\\_+)(?=[punct*])|[punct*](\\_+)(?=[punct*])/ // ^- Not allowed for _\n  },\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noopTest,\n  text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n  punctuation: /^([\\spunctuation])/\n};\n\n// list of punctuation marks from CommonMark spec\n// without * and _ to handle the different emphasis markers * and _\ninline._punctuation = '!\"#$%&\\'()+\\\\-.,/:;<=>?@\\\\[\\\\]`^{|}~';\ninline.punctuation = edit(inline.punctuation).replace(/punctuation/g, inline._punctuation).getRegex();\n\n// sequences em should skip over [title](link), `code`, <html>\ninline.blockSkip = /\\[[^\\]]*?\\]\\([^\\)]*?\\)|`[^`]*?`|<[^>]*?>/g;\n// lookbehind is not available on Safari as of version 16\n// inline.escapedEmSt = /(?<=(?:^|[^\\\\)(?:\\\\[^])*)\\\\[*_]/g;\ninline.escapedEmSt = /(?:^|[^\\\\])(?:\\\\\\\\)*\\\\[*_]/g;\n\ninline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();\n\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim)\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, 'g')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, 'g')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline._escapes = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g;\n\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink)\n  .replace('scheme', inline._scheme)\n  .replace('email', inline._email)\n  .getRegex();\n\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\n\ninline.tag = edit(inline.tag)\n  .replace('comment', inline._comment)\n  .replace('attribute', inline._attribute)\n  .getRegex();\n\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\n\ninline.link = edit(inline.link)\n  .replace('label', inline._label)\n  .replace('href', inline._href)\n  .replace('title', inline._title)\n  .getRegex();\n\ninline.reflink = edit(inline.reflink)\n  .replace('label', inline._label)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.nolink = edit(inline.nolink)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.reflinkSearch = edit(inline.reflinkSearch, 'g')\n  .replace('reflink', inline.reflink)\n  .replace('nolink', inline.nolink)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline);\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: {\n    start: /^__|\\*\\*/,\n    middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n    endAst: /\\*\\*(?!\\*)/g,\n    endUnd: /__(?!_)/g\n  },\n  em: {\n    start: /^_|\\*/,\n    middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n    endAst: /\\*(?!\\*)/g,\n    endUnd: /_(?!_)/g\n  },\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', inline._label)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', inline._label)\n    .getRegex()\n});\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n});\n\ninline.gfm.url = edit(inline.gfm.url, 'i')\n  .replace('email', inline.gfm._extended_email)\n  .getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text)\n    .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n    .replace(/\\{2,\\}/g, '*')\n    .getRegex()\n});\n\n/**\n * smartypants text replacement\n * @param {string} text\n */\nfunction smartypants(text) {\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n}\n\n/**\n * mangle email addresses\n * @param {string} text\n */\nfunction mangle(text) {\n  let out = '',\n    i,\n    ch;\n\n  const l = text.length;\n  for (i = 0; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n}\n\n/**\n * Block Lexer\n */\nclass Lexer {\n  constructor(options) {\n    this.tokens = [];\n    this.tokens.links = Object.create(null);\n    this.options = options || defaults;\n    this.options.tokenizer = this.options.tokenizer || new Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n\n    const rules = {\n      block: block.normal,\n      inline: inline.normal\n    };\n\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n\n  /**\n   * Expose Rules\n   */\n  static get rules() {\n    return {\n      block,\n      inline\n    };\n  }\n\n  /**\n   * Static Lex Method\n   */\n  static lex(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.lex(src);\n  }\n\n  /**\n   * Static Lex Inline Method\n   */\n  static lexInline(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.inlineTokens(src);\n  }\n\n  /**\n   * Preprocessing\n   */\n  lex(src) {\n    src = src\n      .replace(/\\r\\n|\\r/g, '\\n');\n\n    this.blockTokens(src, this.tokens);\n\n    let next;\n    while (next = this.inlineQueue.shift()) {\n      this.inlineTokens(next.src, next.tokens);\n    }\n\n    return this.tokens;\n  }\n\n  /**\n   * Lexing\n   */\n  blockTokens(src, tokens = []) {\n    if (this.options.pedantic) {\n      src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n    } else {\n      src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n        return leading + '    '.repeat(tabs.length);\n      });\n    }\n\n    let token, lastToken, cutSrc, lastParagraphClipped;\n\n    while (src) {\n      if (this.options.extensions\n        && this.options.extensions.block\n        && this.options.extensions.block.some((extTokenizer) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // newline\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.length === 1 && tokens.length > 0) {\n          // if there's a single \\n as a spacer, it's terminating the last line,\n          // so move it there so that we don't get unecessary paragraph tags\n          tokens[tokens.length - 1].raw += '\\n';\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        // An indented code block cannot interrupt a paragraph.\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // fences\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // heading\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // hr\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // blockquote\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // list\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // html\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // def\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.raw;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title\n          };\n        }\n        continue;\n      }\n\n      // table (gfm)\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // lheading\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // top-level paragraph\n      // prevent paragraph consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach(function(getStartIndex) {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        lastToken = tokens[tokens.length - 1];\n        if (lastParagraphClipped && lastToken.type === 'paragraph') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        lastParagraphClipped = (cutSrc.length !== src.length);\n        src = src.substring(token.raw.length);\n        continue;\n      }\n\n      // text\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    this.state.top = true;\n    return tokens;\n  }\n\n  inline(src, tokens = []) {\n    this.inlineQueue.push({ src, tokens });\n    return tokens;\n  }\n\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src, tokens = []) {\n    let token, lastToken, cutSrc;\n\n    // String with links masked to avoid interference with em and strong\n    let maskedSrc = src;\n    let match;\n    let keepPrevChar, prevChar;\n\n    // Mask out reflinks\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    }\n    // Mask out other blocks\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    }\n\n    // Mask out escaped em & strong delimiters\n    while ((match = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index + match[0].length - 2) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);\n      this.tokenizer.rules.inline.escapedEmSt.lastIndex--;\n    }\n\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = '';\n      }\n      keepPrevChar = false;\n\n      // extensions\n      if (this.options.extensions\n        && this.options.extensions.inline\n        && this.options.extensions.inline.some((extTokenizer) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // escape\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // tag\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // link\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // reflink, nolink\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // em & strong\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // br\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // del (gfm)\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // autolink\n      if (token = this.tokenizer.autolink(src, mangle)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // url (gfm)\n      if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // text\n      // prevent inlineText consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach(function(getStartIndex) {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n          prevChar = token.raw.slice(-1);\n        }\n        keepPrevChar = true;\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    return tokens;\n  }\n}\n\n/**\n * Renderer\n */\nclass Renderer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  code(code, infostring, escaped) {\n    const lang = (infostring || '').match(/\\S*/)[0];\n    if (this.options.highlight) {\n      const out = this.options.highlight(code, lang);\n      if (out != null && out !== code) {\n        escaped = true;\n        code = out;\n      }\n    }\n\n    code = code.replace(/\\n$/, '') + '\\n';\n\n    if (!lang) {\n      return '<pre><code>'\n        + (escaped ? code : escape(code, true))\n        + '</code></pre>\\n';\n    }\n\n    return '<pre><code class=\"'\n      + this.options.langPrefix\n      + escape(lang)\n      + '\">'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>\\n';\n  }\n\n  /**\n   * @param {string} quote\n   */\n  blockquote(quote) {\n    return `<blockquote>\\n${quote}</blockquote>\\n`;\n  }\n\n  html(html) {\n    return html;\n  }\n\n  /**\n   * @param {string} text\n   * @param {string} level\n   * @param {string} raw\n   * @param {any} slugger\n   */\n  heading(text, level, raw, slugger) {\n    if (this.options.headerIds) {\n      const id = this.options.headerPrefix + slugger.slug(raw);\n      return `<h${level} id=\"${id}\">${text}</h${level}>\\n`;\n    }\n\n    // ignore IDs\n    return `<h${level}>${text}</h${level}>\\n`;\n  }\n\n  hr() {\n    return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n  }\n\n  list(body, ordered, start) {\n    const type = ordered ? 'ol' : 'ul',\n      startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n    return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n  }\n\n  /**\n   * @param {string} text\n   */\n  listitem(text) {\n    return `<li>${text}</li>\\n`;\n  }\n\n  checkbox(checked) {\n    return '<input '\n      + (checked ? 'checked=\"\" ' : '')\n      + 'disabled=\"\" type=\"checkbox\"'\n      + (this.options.xhtml ? ' /' : '')\n      + '> ';\n  }\n\n  /**\n   * @param {string} text\n   */\n  paragraph(text) {\n    return `<p>${text}</p>\\n`;\n  }\n\n  /**\n   * @param {string} header\n   * @param {string} body\n   */\n  table(header, body) {\n    if (body) body = `<tbody>${body}</tbody>`;\n\n    return '<table>\\n'\n      + '<thead>\\n'\n      + header\n      + '</thead>\\n'\n      + body\n      + '</table>\\n';\n  }\n\n  /**\n   * @param {string} content\n   */\n  tablerow(content) {\n    return `<tr>\\n${content}</tr>\\n`;\n  }\n\n  tablecell(content, flags) {\n    const type = flags.header ? 'th' : 'td';\n    const tag = flags.align\n      ? `<${type} align=\"${flags.align}\">`\n      : `<${type}>`;\n    return tag + content + `</${type}>\\n`;\n  }\n\n  /**\n   * span level renderer\n   * @param {string} text\n   */\n  strong(text) {\n    return `<strong>${text}</strong>`;\n  }\n\n  /**\n   * @param {string} text\n   */\n  em(text) {\n    return `<em>${text}</em>`;\n  }\n\n  /**\n   * @param {string} text\n   */\n  codespan(text) {\n    return `<code>${text}</code>`;\n  }\n\n  br() {\n    return this.options.xhtml ? '<br/>' : '<br>';\n  }\n\n  /**\n   * @param {string} text\n   */\n  del(text) {\n    return `<del>${text}</del>`;\n  }\n\n  /**\n   * @param {string} href\n   * @param {string} title\n   * @param {string} text\n   */\n  link(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n    let out = '<a href=\"' + href + '\"';\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n    out += '>' + text + '</a>';\n    return out;\n  }\n\n  /**\n   * @param {string} href\n   * @param {string} title\n   * @param {string} text\n   */\n  image(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n\n    let out = `<img src=\"${href}\" alt=\"${text}\"`;\n    if (title) {\n      out += ` title=\"${title}\"`;\n    }\n    out += this.options.xhtml ? '/>' : '>';\n    return out;\n  }\n\n  text(text) {\n    return text;\n  }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass TextRenderer {\n  // no need for block level renderers\n  strong(text) {\n    return text;\n  }\n\n  em(text) {\n    return text;\n  }\n\n  codespan(text) {\n    return text;\n  }\n\n  del(text) {\n    return text;\n  }\n\n  html(text) {\n    return text;\n  }\n\n  text(text) {\n    return text;\n  }\n\n  link(href, title, text) {\n    return '' + text;\n  }\n\n  image(href, title, text) {\n    return '' + text;\n  }\n\n  br() {\n    return '';\n  }\n}\n\n/**\n * Slugger generates header id\n */\nclass Slugger {\n  constructor() {\n    this.seen = {};\n  }\n\n  /**\n   * @param {string} value\n   */\n  serialize(value) {\n    return value\n      .toLowerCase()\n      .trim()\n      // remove html tags\n      .replace(/<[!\\/a-z].*?>/ig, '')\n      // remove unwanted chars\n      .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '')\n      .replace(/\\s/g, '-');\n  }\n\n  /**\n   * Finds the next safe (unique) slug to use\n   * @param {string} originalSlug\n   * @param {boolean} isDryRun\n   */\n  getNextSafeSlug(originalSlug, isDryRun) {\n    let slug = originalSlug;\n    let occurenceAccumulator = 0;\n    if (this.seen.hasOwnProperty(slug)) {\n      occurenceAccumulator = this.seen[originalSlug];\n      do {\n        occurenceAccumulator++;\n        slug = originalSlug + '-' + occurenceAccumulator;\n      } while (this.seen.hasOwnProperty(slug));\n    }\n    if (!isDryRun) {\n      this.seen[originalSlug] = occurenceAccumulator;\n      this.seen[slug] = 0;\n    }\n    return slug;\n  }\n\n  /**\n   * Convert string to unique id\n   * @param {object} [options]\n   * @param {boolean} [options.dryrun] Generates the next unique slug without\n   * updating the internal accumulator.\n   */\n  slug(value, options = {}) {\n    const slug = this.serialize(value);\n    return this.getNextSafeSlug(slug, options.dryrun);\n  }\n}\n\n/**\n * Parsing & Compiling\n */\nclass Parser {\n  constructor(options) {\n    this.options = options || defaults;\n    this.options.renderer = this.options.renderer || new Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.textRenderer = new TextRenderer();\n    this.slugger = new Slugger();\n  }\n\n  /**\n   * Static Parse Method\n   */\n  static parse(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parse(tokens);\n  }\n\n  /**\n   * Static Parse Inline Method\n   */\n  static parseInline(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parseInline(tokens);\n  }\n\n  /**\n   * Parse Loop\n   */\n  parse(tokens, top = true) {\n    let out = '',\n      i,\n      j,\n      k,\n      l2,\n      l3,\n      row,\n      cell,\n      header,\n      body,\n      token,\n      ordered,\n      start,\n      loose,\n      itemBody,\n      item,\n      checked,\n      task,\n      checkbox,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'space': {\n          continue;\n        }\n        case 'hr': {\n          out += this.renderer.hr();\n          continue;\n        }\n        case 'heading': {\n          out += this.renderer.heading(\n            this.parseInline(token.tokens),\n            token.depth,\n            unescape(this.parseInline(token.tokens, this.textRenderer)),\n            this.slugger);\n          continue;\n        }\n        case 'code': {\n          out += this.renderer.code(token.text,\n            token.lang,\n            token.escaped);\n          continue;\n        }\n        case 'table': {\n          header = '';\n\n          // header\n          cell = '';\n          l2 = token.header.length;\n          for (j = 0; j < l2; j++) {\n            cell += this.renderer.tablecell(\n              this.parseInline(token.header[j].tokens),\n              { header: true, align: token.align[j] }\n            );\n          }\n          header += this.renderer.tablerow(cell);\n\n          body = '';\n          l2 = token.rows.length;\n          for (j = 0; j < l2; j++) {\n            row = token.rows[j];\n\n            cell = '';\n            l3 = row.length;\n            for (k = 0; k < l3; k++) {\n              cell += this.renderer.tablecell(\n                this.parseInline(row[k].tokens),\n                { header: false, align: token.align[k] }\n              );\n            }\n\n            body += this.renderer.tablerow(cell);\n          }\n          out += this.renderer.table(header, body);\n          continue;\n        }\n        case 'blockquote': {\n          body = this.parse(token.tokens);\n          out += this.renderer.blockquote(body);\n          continue;\n        }\n        case 'list': {\n          ordered = token.ordered;\n          start = token.start;\n          loose = token.loose;\n          l2 = token.items.length;\n\n          body = '';\n          for (j = 0; j < l2; j++) {\n            item = token.items[j];\n            checked = item.checked;\n            task = item.task;\n\n            itemBody = '';\n            if (item.task) {\n              checkbox = this.renderer.checkbox(checked);\n              if (loose) {\n                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                  item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                  if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                    item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                  }\n                } else {\n                  item.tokens.unshift({\n                    type: 'text',\n                    text: checkbox\n                  });\n                }\n              } else {\n                itemBody += checkbox;\n              }\n            }\n\n            itemBody += this.parse(item.tokens, loose);\n            body += this.renderer.listitem(itemBody, task, checked);\n          }\n\n          out += this.renderer.list(body, ordered, start);\n          continue;\n        }\n        case 'html': {\n          // TODO parse inline content if parameter markdown=1\n          out += this.renderer.html(token.text);\n          continue;\n        }\n        case 'paragraph': {\n          out += this.renderer.paragraph(this.parseInline(token.tokens));\n          continue;\n        }\n        case 'text': {\n          body = token.tokens ? this.parseInline(token.tokens) : token.text;\n          while (i + 1 < l && tokens[i + 1].type === 'text') {\n            token = tokens[++i];\n            body += '\\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);\n          }\n          out += top ? this.renderer.paragraph(body) : body;\n          continue;\n        }\n\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens, renderer) {\n    renderer = renderer || this.renderer;\n    let out = '',\n      i,\n      token,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'escape': {\n          out += renderer.text(token.text);\n          break;\n        }\n        case 'html': {\n          out += renderer.html(token.text);\n          break;\n        }\n        case 'link': {\n          out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'image': {\n          out += renderer.image(token.href, token.title, token.text);\n          break;\n        }\n        case 'strong': {\n          out += renderer.strong(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'em': {\n          out += renderer.em(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'codespan': {\n          out += renderer.codespan(token.text);\n          break;\n        }\n        case 'br': {\n          out += renderer.br();\n          break;\n        }\n        case 'del': {\n          out += renderer.del(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'text': {\n          out += renderer.text(token.text);\n          break;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n    return out;\n  }\n}\n\n/**\n * Marked\n */\nfunction marked(src, opt, callback) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked(): input parameter is of type '\n      + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  if (typeof opt === 'function') {\n    callback = opt;\n    opt = null;\n  }\n\n  opt = merge({}, marked.defaults, opt || {});\n  checkSanitizeDeprecation(opt);\n\n  if (callback) {\n    const highlight = opt.highlight;\n    let tokens;\n\n    try {\n      tokens = Lexer.lex(src, opt);\n    } catch (e) {\n      return callback(e);\n    }\n\n    const done = function(err) {\n      let out;\n\n      if (!err) {\n        try {\n          if (opt.walkTokens) {\n            marked.walkTokens(tokens, opt.walkTokens);\n          }\n          out = Parser.parse(tokens, opt);\n        } catch (e) {\n          err = e;\n        }\n      }\n\n      opt.highlight = highlight;\n\n      return err\n        ? callback(err)\n        : callback(null, out);\n    };\n\n    if (!highlight || highlight.length < 3) {\n      return done();\n    }\n\n    delete opt.highlight;\n\n    if (!tokens.length) return done();\n\n    let pending = 0;\n    marked.walkTokens(tokens, function(token) {\n      if (token.type === 'code') {\n        pending++;\n        setTimeout(() => {\n          highlight(token.text, token.lang, function(err, code) {\n            if (err) {\n              return done(err);\n            }\n            if (code != null && code !== token.text) {\n              token.text = code;\n              token.escaped = true;\n            }\n\n            pending--;\n            if (pending === 0) {\n              done();\n            }\n          });\n        }, 0);\n      }\n    });\n\n    if (pending === 0) {\n      done();\n    }\n\n    return;\n  }\n\n  function onError(e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if (opt.silent) {\n      return '<p>An error occurred:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n\n  try {\n    const tokens = Lexer.lex(src, opt);\n    if (opt.walkTokens) {\n      if (opt.async) {\n        return Promise.all(marked.walkTokens(tokens, opt.walkTokens))\n          .then(() => {\n            return Parser.parse(tokens, opt);\n          })\n          .catch(onError);\n      }\n      marked.walkTokens(tokens, opt.walkTokens);\n    }\n    return Parser.parse(tokens, opt);\n  } catch (e) {\n    onError(e);\n  }\n}\n\n/**\n * Options\n */\n\nmarked.options =\nmarked.setOptions = function(opt) {\n  merge(marked.defaults, opt);\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\nmarked.getDefaults = getDefaults;\n\nmarked.defaults = defaults;\n\n/**\n * Use Extension\n */\n\nmarked.use = function(...args) {\n  const extensions = marked.defaults.extensions || { renderers: {}, childTokens: {} };\n\n  args.forEach((pack) => {\n    // copy options to new object\n    const opts = merge({}, pack);\n\n    // set async to true if it was set to true before\n    opts.async = marked.defaults.async || opts.async;\n\n    // ==-- Parse \"addon\" extensions --== //\n    if (pack.extensions) {\n      pack.extensions.forEach((ext) => {\n        if (!ext.name) {\n          throw new Error('extension name required');\n        }\n        if (ext.renderer) { // Renderer extensions\n          const prevRenderer = extensions.renderers[ext.name];\n          if (prevRenderer) {\n            // Replace extension with func to run new extension but fall back if false\n            extensions.renderers[ext.name] = function(...args) {\n              let ret = ext.renderer.apply(this, args);\n              if (ret === false) {\n                ret = prevRenderer.apply(this, args);\n              }\n              return ret;\n            };\n          } else {\n            extensions.renderers[ext.name] = ext.renderer;\n          }\n        }\n        if (ext.tokenizer) { // Tokenizer Extensions\n          if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n            throw new Error(\"extension level must be 'block' or 'inline'\");\n          }\n          if (extensions[ext.level]) {\n            extensions[ext.level].unshift(ext.tokenizer);\n          } else {\n            extensions[ext.level] = [ext.tokenizer];\n          }\n          if (ext.start) { // Function to check for start of token\n            if (ext.level === 'block') {\n              if (extensions.startBlock) {\n                extensions.startBlock.push(ext.start);\n              } else {\n                extensions.startBlock = [ext.start];\n              }\n            } else if (ext.level === 'inline') {\n              if (extensions.startInline) {\n                extensions.startInline.push(ext.start);\n              } else {\n                extensions.startInline = [ext.start];\n              }\n            }\n          }\n        }\n        if (ext.childTokens) { // Child tokens to be visited by walkTokens\n          extensions.childTokens[ext.name] = ext.childTokens;\n        }\n      });\n      opts.extensions = extensions;\n    }\n\n    // ==-- Parse \"overwrite\" extensions --== //\n    if (pack.renderer) {\n      const renderer = marked.defaults.renderer || new Renderer();\n      for (const prop in pack.renderer) {\n        const prevRenderer = renderer[prop];\n        // Replace renderer with func to run extension, but fall back if false\n        renderer[prop] = (...args) => {\n          let ret = pack.renderer[prop].apply(renderer, args);\n          if (ret === false) {\n            ret = prevRenderer.apply(renderer, args);\n          }\n          return ret;\n        };\n      }\n      opts.renderer = renderer;\n    }\n    if (pack.tokenizer) {\n      const tokenizer = marked.defaults.tokenizer || new Tokenizer();\n      for (const prop in pack.tokenizer) {\n        const prevTokenizer = tokenizer[prop];\n        // Replace tokenizer with func to run extension, but fall back if false\n        tokenizer[prop] = (...args) => {\n          let ret = pack.tokenizer[prop].apply(tokenizer, args);\n          if (ret === false) {\n            ret = prevTokenizer.apply(tokenizer, args);\n          }\n          return ret;\n        };\n      }\n      opts.tokenizer = tokenizer;\n    }\n\n    // ==-- Parse WalkTokens extensions --== //\n    if (pack.walkTokens) {\n      const walkTokens = marked.defaults.walkTokens;\n      opts.walkTokens = function(token) {\n        let values = [];\n        values.push(pack.walkTokens.call(this, token));\n        if (walkTokens) {\n          values = values.concat(walkTokens.call(this, token));\n        }\n        return values;\n      };\n    }\n\n    marked.setOptions(opts);\n  });\n};\n\n/**\n * Run callback for every token\n */\n\nmarked.walkTokens = function(tokens, callback) {\n  let values = [];\n  for (const token of tokens) {\n    values = values.concat(callback.call(marked, token));\n    switch (token.type) {\n      case 'table': {\n        for (const cell of token.header) {\n          values = values.concat(marked.walkTokens(cell.tokens, callback));\n        }\n        for (const row of token.rows) {\n          for (const cell of row) {\n            values = values.concat(marked.walkTokens(cell.tokens, callback));\n          }\n        }\n        break;\n      }\n      case 'list': {\n        values = values.concat(marked.walkTokens(token.items, callback));\n        break;\n      }\n      default: {\n        if (marked.defaults.extensions && marked.defaults.extensions.childTokens && marked.defaults.extensions.childTokens[token.type]) { // Walk any extensions\n          marked.defaults.extensions.childTokens[token.type].forEach(function(childTokens) {\n            values = values.concat(marked.walkTokens(token[childTokens], callback));\n          });\n        } else if (token.tokens) {\n          values = values.concat(marked.walkTokens(token.tokens, callback));\n        }\n      }\n    }\n  }\n  return values;\n};\n\n/**\n * Parse Inline\n * @param {string} src\n */\nmarked.parseInline = function(src, opt) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked.parseInline(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked.parseInline(): input parameter is of type '\n      + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  opt = merge({}, marked.defaults, opt || {});\n  checkSanitizeDeprecation(opt);\n\n  try {\n    const tokens = Lexer.lexInline(src, opt);\n    if (opt.walkTokens) {\n      marked.walkTokens(tokens, opt.walkTokens);\n    }\n    return Parser.parseInline(tokens, opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if (opt.silent) {\n      return '<p>An error occurred:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n};\n\n/**\n * Expose\n */\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\nmarked.Renderer = Renderer;\nmarked.TextRenderer = TextRenderer;\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\nmarked.Tokenizer = Tokenizer;\nmarked.Slugger = Slugger;\nmarked.parse = marked;\n\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = Parser.parse;\nconst lexer = Lexer.lex;\n\nexport { Lexer, Parser, Renderer, Slugger, TextRenderer, Tokenizer, defaults, getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };\n","import { render } from \"./MarkdownEditorView.vue?vue&type=template&id=956d9b98\"\nimport script from \"./MarkdownEditorView.vue?vue&type=script&lang=js\"\nexport * from \"./MarkdownEditorView.vue?vue&type=script&lang=js\"\n\nimport \"./MarkdownEditorView.vue?vue&type=style&index=0&id=956d9b98&lang=scss\"\n\nimport exportComponent from \"D:\\\\WEB_Project\\\\Vue\\\\component-library\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","value","_ctx","onInput","$options","innerHTML","getDefaults","async","baseUrl","breaks","extensions","gfm","headerIds","headerPrefix","highlight","langPrefix","mangle","pedantic","renderer","sanitize","sanitizer","silent","smartypants","tokenizer","walkTokens","xhtml","defaults","changeDefaults","newDefaults","escapeTest","escapeReplace","RegExp","source","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","html","encode","test","replace","unescapeTest","_","n","toLowerCase","charAt","String","fromCharCode","parseInt","substring","caret","edit","regex","opt","obj","name","val","getRegex","nonWordAndColonTest","originIndependentUrl","cleanUrl","base","href","prot","decodeURIComponent","e","indexOf","resolveUrl","encodeURI","baseUrls","justDomain","protocol","domain","rtrim","relativeBase","noopTest","exec","merge","target","key","i","arguments","length","Object","prototype","hasOwnProperty","call","splitCells","tableRow","count","row","match","offset","str","escaped","curr","cells","split","trim","shift","pop","splice","push","c","invert","l","suffLen","currChar","slice","findClosingBracket","b","level","checkSanitizeDeprecation","console","warn","repeatString","pattern","result","outputLink","cap","link","raw","lexer","title","text","state","inLink","token","type","tokens","inlineTokens","indentCodeCompensation","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","join","Tokenizer","constructor","options","this","space","src","rules","block","newline","code","codeBlockStyle","fences","lang","inline","_escapes","heading","trimmed","depth","hr","blockquote","blockTokens","list","istask","ischecked","indent","blankLine","endsWithBlankLine","line","nextLine","rawLine","itemContents","endEarly","bull","isordered","ordered","start","loose","items","itemRegex","trimLeft","search","nextBulletRegex","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","task","checked","trimRight","top","spacers","filter","t","hasMultipleLineBreaks","every","chars","lineBreaks","char","pre","def","tag","table","item","header","align","rows","j","k","lheading","paragraph","escape","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","linkLen","reflink","links","nolink","emStrong","maskedSrc","prevChar","lDelim","nextChar","punctuation","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","rDelimAst","rDelimUnd","lastIndex","index","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","br","del","autolink","url","prevCapZero","_backpedal","inlineText","_paragraph","_label","_title","bullet","listItemStart","_tag","_comment","normal","reflinkSearch","out","charCodeAt","random","toString","_punctuation","blockSkip","escapedEmSt","_scheme","_email","_attribute","_href","strong","middle","endAst","endUnd","em","_extended_email","Lexer","create","inlineQueue","static","lex","next","lastToken","cutSrc","lastParagraphClipped","leading","tabs","repeat","some","extTokenizer","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","error","Error","keepPrevChar","keys","includes","lastIndexOf","startInline","Renderer","infostring","quote","slugger","id","slug","body","startatt","listitem","checkbox","tablerow","content","tablecell","flags","image","TextRenderer","Slugger","seen","serialize","getNextSafeSlug","originalSlug","isDryRun","occurenceAccumulator","dryrun","Parser","textRenderer","parser","parse","parseInline","l2","l3","cell","itemBody","ret","renderers","unshift","marked","callback","done","err","pending","setTimeout","onError","message","Promise","all","then","catch","setOptions","use","args","childTokens","pack","opts","ext","prevRenderer","apply","prop","prevTokenizer","values","concat","lexInline","data","input","computed","output","methods","update","__exports__","render"],"sourceRoot":""}